package com.jaaaelu.gzw.design.patterns.chapterOne;

public class DesignPrinciples {
    //  第一章 设计模式入门

    //  设计原则
    //  1.找出应用中可能需要变化之处，把它们独立找出来，不要和那些不需要变化的代码混在一起（把会变化的部分取出来并封装起来，
    //  以便以后可以轻易地改动或扩充此部分，而不影响不需要变化的其他部分）
    //  2.针对接口（接口或是抽象类）编程，而不是针对实现编程
    //  3.多用组合，少用继承（“有一个”比“是一个”更好）

    //  策略模式：定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客体
}
