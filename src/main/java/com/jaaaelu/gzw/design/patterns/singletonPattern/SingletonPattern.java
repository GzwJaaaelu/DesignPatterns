package com.jaaaelu.gzw.design.patterns.singletonPattern;

public class SingletonPattern {
    //  第五章 单件模式

    //  单件模式：确保一个类型只有一个实例，并提供一个全局访问点

    //  要点：
    //  - 单件模式确保了程序中一个类最多只有一个实例
    //  - 单件模式也提供访问这个实例的全局点
    //  - 在 Java 中实现单件模式需要私有的构造器、一个静态方法和一个静态变量
    //  - 确定在性能和资源上的限制，然后小心的选择适当的方案来实现单间，以解决多线程的问题
    //  - 如果 Java 1.5 以上的版本会导致双重检查加锁实现失效
    //  - 小心，你如果使用多个类加载器，可能导致单件失效而产生多个实例
    //  - 如果 JVM 1.2 或之前的版本，你必须建立单件注册表，以免垃圾回收器将单件回收
}
