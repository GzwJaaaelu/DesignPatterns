原型模式
1.介绍：
 - 原型二字表明了该模式有一个样板实例，用户从这个样板对象中复制出来一个内部属性一致的对象，这个过程也就是我们俗称的“克隆”。
 被复制的实例就是我们所称的“原型”，这个原型是可定制的
2.定义：
 - 用原型实例指定创建对象的种类，并通过复制这些原型创建新的对象
3.使用场景：
 - 类初始化需要消耗非常多的资源，包括数据、硬件资源等，通过原型复制避免这些消耗
 - 通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，这时可以使用原型模式
 - 一个对象需要提供给其他对象访问，而且各个调用者可能都需要都需要修改其值时，可以考虑使用原型模式复制多个对象供调用者使用，
 即保护性拷贝
4.注意点：
 - 使用 clone() 拷贝对象时并不会执行构造函数
5.浅拷贝和深拷贝：
 - 浅拷贝也叫影子拷贝，这只是两个对象字段指向了同一地址，所以如果浅拷贝对象中有引用类型对象，那么副本修改的时候也会影响到
 原对象，比如修改了 List 的内容
 - 解决上述问题的方法就是深拷贝，即在拷贝对象时，对于引用型的字段也要采用拷贝的形式，而不是单纯引用的形式
6.Android 中的应用：
 - Intent 的 clone()
7.小结
 - 原型模式的本质上就是对象拷贝
 优点：
 - 原型模式是在内存中二进制流的拷贝，要比直接 new 一个对象的性能好很多，特别是要在一个循环体内产生大量的对象时，原型模式
 可以更好的体现其优点
 缺点：
 - 这既是它的优点也是缺点，直接在内存中拷贝，构造函数是不会执行的，在时机开发当中应该注意这个千载的问题，优点就是减少了约
 束，缺点也是减少了约束，需要大家在实际应用时考虑